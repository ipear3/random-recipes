name: Tests, Coverage, and Badges

on:
  push:
    branches-ignore:
      # Ignore the following branches because they're protected from merges that haven't already passed this workflow during a pull request.
      - main
    paths-ignore:
      # Ignore the following paths because they're pushed by this workflow.
      - images/badges/tests.svg
      - images/badges/coverage.svg

jobs:
  tests-coverage-badges:
    name: Tests, Coverage, and Badges
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11.5"

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python - -y

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          # `timeout` is not available on macOS, so we define a custom function.
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }
          
          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Check lock file
        run: poetry check --lock

      - name: Install project
        run: poetry install --with dev

      - name: Run pytest
        run: poetry run pytest

      - name: Run pytest via coverage
        run: |
          poetry run coverage run --data-file reports/.coverage -m pytest --junitxml=reports/tests.xml
          poetry run coverage xml --data-file reports/.coverage -o reports/coverage.xml --fail-under 100

      - name: Generate badges
        run: |
          poetry run genbadge tests -i reports/tests.xml -o images/badges/tests.svg
          poetry run genbadge coverage -i reports/coverage.xml -o images/badges/coverage.svg

      - name: Configure git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Generate badges and add to git
        run: |
          git add images/badges/tests.svg
          git add images/badges/coverage.svg

      - name: Commit and push or do nothing
        run: |
          if ! git diff-index --quiet HEAD; then
            git commit -m "Create badges for tests and coverage"
            git push
          fi
